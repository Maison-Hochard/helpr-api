[[{"l":"Introduction","p":["Bienvenue dans la documentation de notre API ! Notre API est accessible à tous. Un compte utilisateur TMDB est requis pour demander une clé API. Les utilisateurs professionnels sont approuvés sur une base par application."]},{"l":"Pour commencer","p":["Pour démarrer avec cette API NestJS, suivez ces étapes:","Clonez le référentiel:","Installez les dépendances:","Démarrez le serveur de développement:","Maintenant, vous pouvez ouvrir l'application dans votre navigateur à l'adresse http://localhost:3000. Vous pouvez utiliser un outil comme Postman pour envoyer des demandes aux points de terminaison de l'API. Voici la Collection Postman."]},{"l":"Objectifs","p":["L'objectif de ce modèle de NestJS est de fournir une structure de départ pour les développeurs qui souhaitent créer rapidement une API pour leur application web ou mobile. Il comprend déjà les fonctionnalités courantes telles que l'authentification OAuth avec Google, l'authentification JWT, la gestion du mot de passe oublié, et un envoi de courriels fonctionnel avec un modèle de courriel réactif."]},{"l":"Architecture","p":["URL: http://localhost:3000/auth/register","Method: POST","Body (JSON):","URL: http://localhost:3000/auth/login","URL: http://localhost:3000/auth/refresh"]}],[{"l":"Endpoints"},{"l":"Méthodes HTTP supportées","p":["Permet de récupérer des informations à partir de l'API.","Permet d'envoyer des informations à l'API pour créer un nouvel enregistrement.","Permet de mettre à jour des informations existantes à partir de l'API.","Permet de supprimer des informations à partir de l'API."]},{"i":"paramètres-dentrée","l":"Paramètres d'entrée"},{"i":"endpoint--authcreate-user","l":"Endpoint : Auth/Create User","p":["firstname: Le prénom de l'utilisateur","lastname: Le nom de famille de l'utilisateur","email: L'adresse email de l'utilisateur","username: Le nom d'utilisateur de l'utilisateur","password: Le mot de passe de l'utilisateur"]},{"i":"endpoint--authlogin","l":"Endpoint : Auth/Login","p":["login: Le nom d'utilisateur ou l'adresse email de l'utilisateur","password: Le mot de passe de l'utilisateur"]},{"i":"endpoint--authrefresh-token","l":"Endpoint : Auth/Refresh Token","p":["Aucun paramètre d'entrée requis."]},{"l":"Exemples de réponse","p":["Si les informations de connexion sont correctes, vous recevrez une réponse de succès avec le code HTTP 200 et le corps de la réponse contiendra un jeton d'authentification JWT:","Si la création de l'utilisateur est réussie, vous recevrez une réponse de succès avec le code HTTP 201 et le corps de la réponse contiendra les informations sur l'utilisateur créé:","Si les informations de connexion sont incorrectes, vous recevrez une réponse d'erreur avec le code HTTP 401 et le corps de la réponse contiendra un message d'erreur:","Si le nom d'utilisateur ou l'adresse e-mail est déjà pris, vous recevrez une réponse d'erreur avec le code HTTP 409 et le corps de la réponse contiendra un message d'erreur:"]}],[{"l":"Authentification","p":["Cette API utilise 3 guards pour gérer les autorisations d'accès aux différents endpoints:","Ce guard permet de vérifier que la requête comporte un token JWT valide. Ce token est envoyé dans le header de la requête sous la forme Authorization: Bearer . Si le token est valide, les informations décodées seront disponibles dans le contexte de la requête (req.user).","Ce guard permet de vérifier que l'utilisateur connecté a les droits nécessaires pour accéder à un endpoint donné. Les rôles autorisés sont spécifiés dans la définition de la route. Si l'utilisateur n'a pas les droits nécessaires, une erreur 401 sera retournée.","Ce guard n'est utilisé que pour le endpoint de connexion (/auth/login). Il permet de vérifier que les informations d'identification envoyées (nom d'utilisateur et mot de passe) sont correctes. Si les informations sont correctes, un token JWT sera retourné."]}],[{"l":"Erreurs"},{"l":"Liste des erreurs les plus courantes"},{"l":"Comment les traiter"}],[{"i":"exemples-dutilisation","l":"Exemples d'utilisation","p":["Envoi d'une requête POST à l'URL http://localhost:3000/auth/register avec le corps de la requête suivant (en JSON):","Envoi d'une requête POST à l'URL http://localhost:3000/auth/login avec le corps de la requête suivant (en JSON):"]}],[{"l":"Références"},{"l":"Documentation","p":["For more information on how to use this NestJS api, see the documentation or http://localhost:3000/api."]},{"l":"License","p":["This NestJS template is licensed under the MIT License."]}]]