generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  loginType           String?               @default("email")
  username            String                @unique
  email               String                @unique
  firstname           String
  lastname            String
  password            String
  stripeCustomerId    String?
  bio                 String?               @default("No bio yet")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime?             @updatedAt
  role                Int                   @default(1)
  isVerified          Boolean               @default(false)
  refreshToken        String?               @unique
  authToken           String?               @unique
  id                  Int                   @id @default(autoincrement())
  avatar              String                @default("https://uynsrkwqyplqhfrmdaqw.supabase.co/storage/v1/object/public/avatars/default-avatar.jpeg")
  cover               String                @default("https://uynsrkwqyplqhfrmdaqw.supabase.co/storage/v1/object/public/avatars/banner.avif")
  providerId          Int?
  emailVerification   EmailVerification[]
  flow                Flow[]
  providerCredentials ProviderCredentials[]
  resetPassword       ResetPassword[]
  subscription        Subscription[]
  providers           Provider[]            @relation("ProviderToUser")
}

model ProviderCredentials {
  id           Int     @id @default(autoincrement())
  providerId   String  @unique
  provider     String
  accessToken  String
  userId       Int
  expiresAt    Int?
  refreshToken String?
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  stripeId      String  @unique
  stripeStatus  String?
  stripePriceId String?
  trialEndsAt   Int?
  endsAt        Int?
  startDate     Int
  lastEventDate Int
  id            Int     @id @default(autoincrement())
  userId        Int
  name          String
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ResetPassword {
  token     String   @unique
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailVerification {
  token     String   @unique
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Flow {
  id          Int             @id @default(autoincrement())
  name        String
  description String?
  public      Boolean         @default(false)
  accessToken String
  enabled     Boolean         @default(true)
  status      Int             @default(1)
  userId      Int
  createdAt   DateTime        @default(now())
  updatedAt   DateTime?       @updatedAt
  triggerId   Int
  trigger     Trigger         @relation(fields: [triggerId], references: [id], onDelete: Cascade)
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  actions     FlowActions[]
  variables   FlowVariables[]
}

model Provider {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String
  logo        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  premium     Boolean   @default(false)
  tokenLink   String?
  actions     Action[]
  triggers    Trigger[]
  users       User[]    @relation("ProviderToUser")
}

model Action {
  id          Int           @id @default(autoincrement())
  title       String
  description String
  endpoint    String
  name        String        @unique
  providerId  Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?     @updatedAt
  premium     Boolean       @default(false)
  provider    Provider      @relation(fields: [providerId], references: [id], onDelete: Cascade)
  flows       FlowActions[]
  variables   Variables[]   @relation("ActionToVariables")
}

model FlowActions {
  id        Int       @id @default(autoincrement())
  flowId    Int
  index     Int?
  actionId  Int
  payload   String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  action    Action    @relation(fields: [actionId], references: [id], onDelete: Cascade)
  flow      Flow      @relation(fields: [flowId], references: [id], onDelete: Cascade)
}

model Trigger {
  id          Int         @id @default(autoincrement())
  provider    String
  title       String      @unique
  value       String
  webhook     Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt
  providerId  Int
  description String
  premium     Boolean     @default(false)
  key         String      @unique
  flows       Flow[]
  Provider    Provider    @relation(fields: [providerId], references: [id])
  variables   Variables[]
}

model Variables {
  id        Int       @id @default(autoincrement())
  key       String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  triggerId Int?
  title     String
  type      String    @default("text")
  required  Boolean   @default(true)
  webhook   Boolean   @default(false)
  trigger   Trigger?  @relation(fields: [triggerId], references: [id])
  actions   Action[]  @relation("ActionToVariables")
}

model FlowVariables {
  id        Int       @id @default(autoincrement())
  key       String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  flowId    Int?
  flow      Flow?     @relation(fields: [flowId], references: [id])
}
