generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  loginType           String?               @default("email")
  username            String                @unique
  email               String                @unique
  firstname           String
  lastname            String
  password            String
  stripeCustomerId    String?
  createdAt           DateTime              @default(now())
  profilePicture      String?
  updatedAt           DateTime?             @updatedAt
  role                Int?                  @default(1)
  isVerified          Boolean               @default(false)
  refreshToken        String?               @unique
  authToken           String?               @unique
  id                  Int                   @id @default(autoincrement())
  emailVerification   EmailVerification[]
  resetPassword       ResetPassword[]
  Subscription        Subscription[]
  ProviderCredentials ProviderCredentials[]
  Flow                Flow[]
}

model ProviderCredentials {
  id          Int    @id @default(autoincrement())
  providerId  String @unique
  provider    String
  accessToken String
  userId      Int
  expiresAt   Int?
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  stripeId      String  @unique
  stripeStatus  String?
  stripePriceId String?
  trialEndsAt   Int?
  endsAt        Int?
  startDate     Int
  lastEventDate Int
  id            Int     @id @default(autoincrement())
  userId        Int
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ResetPassword {
  token     String   @unique
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailVerification {
  token     String   @unique
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Flow {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  enabled     Boolean      @default(true)
  status      Int          @default(1)
  trigger     Int          @default(1)
  userId      Int
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt
  actions     FlowAction[]
}

model Action {
  id          Int          @id @default(autoincrement())
  name        String
  description String?
  provider    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  flows       FlowAction[]
}

model FlowAction {
  id       Int    @id @default(autoincrement())
  flowId   Int
  actionId Int
  flow     Flow   @relation(fields: [flowId], references: [id], onDelete: Cascade)
  action   Action @relation(fields: [actionId], references: [id], onDelete: Cascade)
}
